'use strict';

module.exports = function(MyUser) {

	/** This call adds custom behaviour to the standard Loopback login.
	 *
	 *  Since it uses the User.login function of the User model, let's also
	 *  keep the same parameter structure.
	 */
	MyUser.custom_login = function (credentials, include, callback) {

		// Invoke the default login function
		return MyUser.login(credentials, include, function (loginErr, loginToken) {
			if (loginErr)
				return callback(loginErr);
			/* If we got to this point, the login call was successfull and we
			 * have now access to the token generated by the login function.
			 *
			 * This means that now we can add extra logic and manipulate the
			 * token before returning it. Unfortunately, the login function
			 * does not return the user data, so if we need it we need to hit
			 * the datasource again to retrieve it.
			 */

			// If needed, here we can use loginToken.userId to retrieve
			// the user from the datasource
			return MyUser.findById(loginToken.userId, function (findErr, userData) {
				if (findErr)
					return callback(findErr);

				// Here you can do something with the user info, or the token, or both

				// Return the access token
				return callback(null, loginToken.toObject().id);
			});
		});
	};

	MyUser.custom_logout=function(token,cb){
		return MyUser.logout(token,function(logout_err){
			if(logout_err){
				return cb(logout_err);
			}
			return cb(null,{"message":"OK"});
		});
	}

	/** Register a path for the new login function
	 */
	MyUser.remoteMethod('custom_login', {
		'http': {
			'path': '/login',
			'verb': 'post'
		},
		'accepts': [
			{
				'arg': 'credentials',
				'type': 'object',
				'description': 'Login credentials',
				'required': true,
				'http': {
					'source': 'body'
				}
			},
			{
				'arg': 'include',
				'type': 'string',
				'description': 'Related objects to include in the response. See the description of return value for more details.',
				'http': {
					'source': 'query'
				}
			}
		],
		'returns': [
			{
				'arg': 'token',
				'type': 'number'
			}
		]
	});

	MyUser.remoteMethod('custom_logout', {
		'http': {
			'path': '/logout',
			'verb': 'post'
		},
		'accepts':
			{
				'arg': 'token',
				'type': 'string',
			},
		'returns':
			{
				'root': 'true'
			}
	});
};
